=pod

=encoding utf-8

=head1 NAME

Mojolicious::Plugin::Jam - Mojolicious plugin

=head1 SYNOPSIS

 # Mojolicious
 $self->plugin('Jam');

 # Mojolicious::Lite
 plugin 'Jam';

=head1 DESCRIPTION

L<Mojolicious::Plugin::Jam> is a L<Mojolicious> plugin that enables
additional features for Mojolicious.

=over

=item *

Inclusion of current versions (either bundled into this plugin or via
CDN) of various JavaScript libraries, including jQuery, jQuery UI, jQuery
Validation plugin, and jQuery Tools (see the L</library> section)

=item *

Perlish and object-oriented HTML form generation and both client- and
server-side validation defined in a single place rather than the various
parts spread across the controllers and views (see the L<"form"|/form1> section)

=item *

Setting security features by default for a Mojolicious app, including SSL
certificate generation, http to https redirection, random secret
passphrase, enforced session timeout, custom cookie name, sending the
cookie only over HTTPS, immediate expiration and disable caching of
content, salted password hashing, channelized logging, and custom server
header (see the L</security> section)

=back

=head1 METHODS

L<Mojolicious::Plugin::Jam> inherits all methods from
L<Mojolicious::Plugin> and implements the following new ones.

=head2 register

 $plugin->register(Mojolicious->new);

Register plugin in L<Mojolicious> application.

=head1 HELPERS

L<Mojolicious::Plugin::Jam> implements the following helpers.

=head2 jam

Usage:

 $app->jam(command => @options);  # In Mojolicious app
 app->jam(command => @options);   # In Mojolicious::Lite app
 $self->jam(command => @options); # In controller
 %== jam command => @options      # In templates and layouts

Available commands for the 'jam' helper, and their usage is documented in the L</COMMANDS> section.

=head1 COMMANDS

=head2 library

 # In template or layout
 %== jam library => $library => {$option => $value}
 
 # In controller
 my $library = $self->jam(library => $library => {$option => $value});
 $self->stash(library => $library);
 # In template or layout
 %== $library

Loads one or more JavaScript libraries:

=head3 jQuery

Use jQuery

 %== jam library => 'jQuery'

Produces:

 <script src="/js/jquery-1.10.2.min.js"></script>
 
Use a CDN (valid cdn's: google, mediatemple, microsoft, cdnjs, jquery,
cloudflare, and default)

 %== jam library => jQuery => {cdn => 'google'}

Produces:

 <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>

See the L<"jQuery"|/jQuery1> example for a complete demonstration.

=head3 jQuery UI

Use the bundled jQuery UI

 %== jam library => 'jQuery UI'
 
Produces:

 <link href="/css/jquery-ui-themes-1.10.3/themes/smoothness/jquery-ui.min.css" media="screen" rel="stylesheet" />
 <script src="/js/jquery-ui-1.10.3/jquery-1.9.1.js"></script>
 <script src="/js/jquery-ui-1.10.3/ui/minified/jquery-ui.min.js"></script>
 
Use the 'trontastic' theme

 %== jam library => 'jQuery UI' => {theme => 'trontastic'}
 
Produces:

 <link href="/css/jquery-ui-themes-1.10.3/themes/trontastic/jquery-ui.min.css" media="screen" rel="stylesheet" />
 <script src="/js/jquery-ui-1.10.3/jquery-1.9.1.js"></script>
 <script src="/js/jquery-ui-1.10.3/ui/minified/jquery-ui.min.js"></script>
 
Use the CDN (valid cdn's: default)

 %== jam library => 'jQuery UI' => {cdn => 'default'}
 
Produces:

 <link href="http://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.min.css" media="screen" rel="stylesheet" />
 <script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
 <script src="http://code.jquery.com/ui/1.10.3/jquery-ui.min.js"></script>
 
Use the current version of jQuery (1.10.2) instead of the one packaged
with jQuery UI (1.9.1)

 %== jam library => 'jQuery UI' => {current => 1}

Produces:

 <link href="/css/jquery-ui-themes-1.10.3/themes/smoothness/jquery-ui.min.css" media="screen" rel="stylesheet" />
 <script src="/js/jquery-1.10.2.min.js"></script>
 <script src="/js/jquery-ui-1.10.3/ui/minified/jquery-ui.min.js"></script>

See the L<"jQuery UI"|/jQuery-UI1> example for a complete demonstration.

=head3 jQuery plugin

Use the Validation plugin

 %== jam library => 'jQuery plugin' => {validation => 1}

Produces:

 <script src="/js/jquery-validation-1.11.1/dist/jquery.validate.min.js"></script>

Please note that plugins generally require jQuery to be loaded prior to the
plugin.
Check the plugin's respective documentation for details.
This can be achieved via:

 %== jam library => 'jQuery'
 %== jam library => 'jQuery plugin' => {validation => 1}

or

 %== jam library => jQuery => 'jQuery plugin' => {validation => 1}

See the L<"jQuery plugin"|/jQuery-plugin1> example for a complete demonstration.

=head3 jQuery Tools

Use jQuery Tools

 %== jam library => 'jQuery Tools'
 
Produces:

 <script src="/js/jquery-tools-1.2.7/full/jquery.tools.min.js"></script>
 
Use the 'tiny' combination (valid combinations: tiny, form, all, full, '')

 %== jam library => jquery => 'jQuery Tools' => {combination => 'tiny'}
 
Produces:

 <script src="/js/jquery-1.10.2.min.js"></script>
 <script src="/js/jquery-tools-1.2.7/tiny/jquery.tools.min.js"></script>
 
Use the CDN (valid cdn's: default)

 %== jam library => jQuery Tools' => {cdn => 'default'}

Produces:

 <script src="http://cdn.jquerytools.org/1.2.7/full/jquery.tools.min.js"></script>

The default combination is 'full'.
The 'full' and '' combinations include jQuery, so there is no need to also
load jQuery separately.
The 'tiny', 'form', and 'all' combinations do not include jQuery, so you
will need to load it prior to loading jQuery Tools.

Here is a list of the combinations and a short description from the jQuery
Tools site:

=over

=item tiny:

UI Tools: Tabs, Tooltip, Scrollable and Overlay (4.45 Kb)

=item form:

Form tools: Dateinput, Rangeinput and Validator. No jQuery library.
 
=item all:

ALL jQuery Tools. No jQuery library

=item '':
 
jQuery Library + UI Tools
 
=item full (default):

jQuery Library + ALL jQuery Tools

=back

See the L<"jQuery Tools"|/jQuery-Tools1> example for a complete demonstration.

=head2 form

Create the form subroutine:

 sub form {
   my $form = $app->jam(form => \%options); # Mojolicious
   my $form = app->jam(form => \%options);  # Mojolicious::Lite
   # Configure the form here
   return $form;
 }

In the controller:

 $self->stash(form => form);

In the template:

 # Insert necessary JavaScript libraries
 %== jam library => 'jQuery UI' => {current => 1}
 %== jam library => 'jQuery plugin' => {validation => 1}

 # Generate the form HTML
 %== $form

In the controller for the submitted form:

 # Set values from GET and/or POST parameters
 my $form = form->values($self);
 
 # Validate form
 if ($form->valid) {
   # do something
 } else {
   # do something else
 }

The 'form' command provides a way to define HTML forms and their validation
rules in one place.

=head3 Options

=head4 builtin

 my $form = $self->jam('form', {builtin => $builtin});

Use a built-in form:

=over

=item *

login

=back

For the rest of the options, see the L<Mojolicious::Plugin::Jam::Form> documentation.

=head2 security

 # In Mojolicious
 $app->jam('security');
 $app->jam(security => \%options);
 
 # In Mojolicious::Lite
 app->jam('security');
 app->jam(security => \%options);

The 'security' command automatically configures Mojolicious to be a bit
more secure by default, including:

=over

=item *

If an SSL certificate and key are not specified or the certificate is
expired, generates a self-signed certficate with OpenSSL

=item *

Automatically configures Hypnotoad to listen for unencrypted requests via
HTTP and redirects them to the HTTPS port

=item *

Morbo can be used with proper listen arguments:

 morbo -l 'http://*:3000' \
 -l "https://*:3001?key=$HOME/.mojolicious/server.key&cert=$HOME/.mojolicious/server.crt"

Or use scripts/security/morbo.pl:

 ./scripts/security/morbo.pl examples/security/test

=item *

Generates a random secret passphrase to encrypt session cookies

=item *

Enforces session timeout length via server-side expiration and instructing the browser to refresh with a meta http-equiv refresh in a custom default layout

=item *

Customizes the cookie name

=item *

Sends the cookie over HTTPS only

=item *

Immediately expires content delivered over HTTPS and instructs the browser not to cache it

=item *

Provides salted password hashing and validation helper functions

 # Hash a password
 my $hash = $self->hash($original_password);
 
 # Validate it later
 if ($self->validate_hash($hash, $password)) {
   # do something here
 }

=item *

Provides a channelized logging helper function and logs client interaction by default

 # Make a "custom" logging channel
 app->jam(security => {logging_custom => 1});
 
 # Log a message to the "custom" channel
 $self->log('custom', $message);

=item *

Custom server header

=item *

Otherwise stays out of your way

=back

The default configuration values are stored in a hashref:

 {
   secret_length => 20,
   session_hours => 1,
   cookie_name   => 'Jam',
   http_port     => 3000,
   https_port    => 3001,
   config_dir    => catdir($ENV{HOME}, '.mojolicious'),
   ssl_key       => 'server.key',
   ssl_crt       => 'server.crt',
   ssl_days      => 365,
   ssl_subj      => '/C=US/ST=NY/CN=*',
   logging_nav   => 1,
   server        => 'Jam',
 }

Any of these values can be overridden (or added) by appending them to the plugin call, for example:

 # Disable logging client interaction
 app->jam(security => {logging_nav => 0});

See the L<"security"|/security1> example for a demonstration.

=head1 EXAMPLES

The following examples demonstrate how L<Mojolicious::Plugin::Jam> can be
used.

They are included in the examples directory and can be run via morbo or
hypnotoad after installing the module (see the L</Installation> section):

 morbo examples/library/jquery
 morbo examples/library/jqueryui
 morbo examples/library/jquery_plugin
 morbo examples/library/jquery_tools
 morbo examples/form/login1
 morbo examples/form/login2
 morbo examples/form/login3
 morbo -l "http://*:3000" -l "https://*:3001/?key=$HOME/.mojolicious/server.key&cert=$HOME/.mojolicious/server.crt" examples/security/test
 scripts/security/morbo.pl examples/security/test
 hypnotoad -f examples/security/test

=head2 library

=head3 jQuery

The included example script at examples/library/jquery demonstrates how
L<Mojolicious::Plugin::Jam> can be used to include jQuery:

=include examples/library/jquery

The resulting page is:

=include examples/library/jquery.html

=head3 jQuery UI

The included example script at examples/library/jquery_ui demonstrates how
L<Mojolicious::Plugin::Jam> can be used to include jQuery UI:

=include examples/library/jquery_ui

The resulting page is:

=include examples/library/jquery_ui.html

=head3 jQuery plugin

The included example script at examples/library/jquery_plugin demonstrates
how L<Mojolicious::Plugin::Jam> can be used to include jQuery plugins:

=include examples/library/jquery_plugin

The resulting page is:

=include examples/library/jquery_plugin.html

=head3 jQuery Tools

The included example script at examples/library/jquery_tools demonstrates
how L<Mojolicious::Plugin::Jam> can be used to include jQuery Tools:

=include examples/library/jquery_tools

The resulting page is:

=include examples/library/jquery_tools.html

=head2 form

There are three examples in examples/form/, login1, login2, and login3.
Each of these examples produce the same HTML form and validation rules,
but goes about it differently.

The first example uses the built-in 'login' form.
The second example uses built-in fields defined in
L<Mojolicious::Plugin::Jam::Form>.
The third example uses the 'field' method in
L<Mojolicious::Plugin::Jam::Form> to create each field.

All three examples produce this page:

=include examples/form/login1.html

These examples use the built-in 'horizontal' style, but you can use any
other built-in styles, the 'style' method in
L<Mojolicious::Plugin::Jam::Form>, or a
L<Mojolicious::Plugin::Jam::Form::Style> object to style forms.

=head3 login1

=include examples/form/login1

=head3 login2

=include examples/form/login2

=head3 login3

=include examples/form/login3

=head2 security

The included example script at examples/security/test demonstrates how
L<Mojolicious::Plugin::Jam> can be used to activate security features:

=include examples/security/test

Start the app via C<hypnotoad -f examples/security/test> and then request
"http://127.0.0.1:3000" via
C<< curl -Lk -D examples/security/test.headers http://127.0.0.1:3000 >examples/security/test.html >>:

Hypnotoad:

=include examples/security/test.log

Headers:

=include examples/security/test.headers

HTML:

=include examples/security/test.html

=head1 SEE ALSO

L<jQuery|http://jquery.com/>,
L<jQuery UI|http://jqueryui.com/>,
L<jQuery Validation plugin|http://jqueryvalidation.org/>,
L<jQuery Tools|http://jquerytools.org/>

L<Mojolicious::Plugin::Jam::Form>,
L<Mojolicious::Plugin::Jam::Form::Button>,
L<Mojolicious::Plugin::Jam::Form::Field>,
L<Mojolicious::Plugin::Jam::Form::Style>

L<Mojolicious>, L<Mojolicious::Guides>, L<http://mojolicio.us>

=head1 DEPENDENCIES

This module depends on Perl, L<Mojolicious>, L<IO::Socket::SSL>, and
OpenSSL.

=head1 SOURCE REPOSITORY

L<http://github.com/qtfk/Mojolicious-Plugin-Jam>

=head2 Installation

The included install.sh (and dist.sh) scripts should enable easy
installation on Mac, Linux and Cygwin environments that use cpanm (CPAN
Minus) to manage their CPAN modules.
This procedure downloads L<Mojolicious::Plugin::Jam> from
Github, then builds and installs it:

 git clone https://github.com/qtfk/Mojolicious-Plugin-Jam.git
 cd Mojolicious-Plugin-Jam
 ./scripts/install.sh

=head1 AUTHOR

qtfk <mojolicious-plugin-jam@qtfk.net>

=head1 COPYRIGHT AND LICENSE

jQuery has the following copyright and licensing banner:

 /*!
  * jQuery JavaScript Library v1.10.2
  * http://jquery.com/
  *
  * Includes Sizzle.js
  * http://sizzlejs.com/
  *
  * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors
  * Released under the MIT license
  * http://jquery.org/license
  *
  * Date: 2013-07-03T13:48Z
  */

jQuery UI has the following copyright and licensing banner:

 /*! jQuery UI - v1.10.3 - 2013-05-03
 * http://jqueryui.com
 * Copyright 2013 jQuery Foundation and other contributors; Licensed MIT */

jQuery Validation Plugin has the following copyright and licensing banner:

 /*!
  * jQuery Validation Plugin 1.11.1
  *
  * http://bassistance.de/jquery-plugins/jquery-plugin-validation/
  * http://docs.jquery.com/Plugins/Validation
  *
  * Copyright 2013 Jörn Zaefferer
  * Released under the MIT license:
  *   http://www.opensource.org/licenses/mit-license.php
  */

jQuery Tools has the following copyright and licensing banner:

 /*!
  * jQuery Tools v1.2.7 - The missing UI library for the Web
  *
  * NO COPYRIGHTS OR LICENSES. DO WHAT YOU LIKE.
  *
  * http://flowplayer.org/tools/
  *
  */

Copyright (C) 2013 by qtfk

This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=cut
